executing main.sh
Sun Mar 31 18:33:25 EDT 2024
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors

Attaching package: ‘ape’

The following object is masked from ‘package:dplyr’:

    where

--------------------------------------------------------------
 Analysis of Geostatistical Data
 For an Introduction to geoR go to http://www.leg.ufpr.br/geoR
 geoR version 1.9-2 (built on 2022-08-09) is now loaded
--------------------------------------------------------------

ggtree v3.10.0 For help: https://yulab-smu.top/treedata-book/

If you use the ggtree package suite in published research, please cite
the appropriate paper(s):

Guangchuang Yu, David Smith, Huachen Zhu, Yi Guan, Tommy Tsan-Yuk Lam.
ggtree: an R package for visualization and annotation of phylogenetic
trees with their covariates and other associated data. Methods in
Ecology and Evolution. 2017, 8(1):28-36. doi:10.1111/2041-210X.12628

Guangchuang Yu, Tommy Tsan-Yuk Lam, Huachen Zhu, Yi Guan. Two methods
for mapping and visualizing associated data on phylogeny using ggtree.
Molecular Biology and Evolution. 2018, 35(12):3041-3043.
doi:10.1093/molbev/msy194

S Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L
Zhan, T Wu, E Hu, Y Jiang, X Bo, G Yu. ggtreeExtra: Compact
visualization of richly annotated phylogenetic data. Molecular Biology
and Evolution. 2021, 38(9):4039-4042. doi: 10.1093/molbev/msab166

Attaching package: ‘ggtree’

The following object is masked from ‘package:ape’:

    rotate

The following object is masked from ‘package:tidyr’:

    expand

Warning message:
package ‘ggtree’ was built under R version 4.3.2 
Loading required package: Rcpp
Loading 'brms' package (version 2.20.1). Useful instructions
can be found by typing help('brms'). A more detailed introduction
to the package is available through vignette('brms_overview').

Attaching package: ‘brms’

The following object is masked from ‘package:stats’:

    ar

Linking to GEOS 3.12.0, GDAL 3.7.2, PROJ 9.3.0; sf_use_s2() is TRUE
Warning message:
package ‘rnaturalearth’ was built under R version 4.3.2 

Attaching package: ‘rnaturalearthdata’

The following object is masked from ‘package:rnaturalearth’:

    countries110

Warning message:
package ‘rnaturalearthdata’ was built under R version 4.3.2 
`summarise()` has grouped output by 'Glottolog_Name', 'Glottocode', 'Family',
'Latitude', 'Longitude'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Glottolog_Name', 'Glottocode', 'Family',
'Latitude'. You can override using the `.groups` argument.
Don't know how to automatically pick scale for object of type <object_size>.
Defaulting to continuous.
Warning messages:
1: In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Māngarongaro' in 'mbcsToSbcs': dot substituted for <c4>
2: In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Māngarongaro' in 'mbcsToSbcs': dot substituted for <81>
3: In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Māngarongaro' in 'mbcsToSbcs': dot substituted for <c4>
4: In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'Māngarongaro' in 'mbcsToSbcs': dot substituted for <81>
null device 
          1 
Warning message:
In left_join(., pcs, by = "Glottocode") :
  Detected an unexpected many-to-many relationship between `x` and `y`.
ℹ Row 98 of `x` matches multiple rows in `y`.
ℹ Row 947 of `y` matches multiple rows in `x`.
ℹ If a many-to-many relationship is expected, set `relationship =
  "many-to-many"` to silence this warning.
Don't know how to automatically pick scale for object of type <object_size>.
Defaulting to continuous.
`geom_smooth()` using formula = 'y ~ x'
null device 
          1 
Compiling Stan program...
Start sampling

SAMPLING FOR MODEL 'a05e89d8e41b49844b6c0b615b13fe09' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.002429 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 24.29 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 

SAMPLING FOR MODEL 'a05e89d8e41b49844b6c0b615b13fe09' NOW (CHAIN 2).
Chain 1: Iteration:    1 / 4000 [  0%]  (Warmup)

SAMPLING FOR MODEL 'a05e89d8e41b49844b6c0b615b13fe09' NOW (CHAIN 3).
Chain 2: 
Chain 2: Gradient evaluation took 0.002767 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 27.67 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 

SAMPLING FOR MODEL 'a05e89d8e41b49844b6c0b615b13fe09' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.002829 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 28.29 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 2: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: 
Chain 4: Gradient evaluation took 0.002767 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 27.67 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 3: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 4000 [  0%]  (Warmup)
Chain 1: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 2: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 3: Iteration:  400 / 4000 [ 10%]  (Warmup)
Chain 1: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 4: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 3: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 2: Iteration:  800 / 4000 [ 20%]  (Warmup)
Chain 1: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 4: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 3: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 2: Iteration: 1200 / 4000 [ 30%]  (Warmup)
Chain 1: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 3: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 1: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 1: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 2: Iteration: 1600 / 4000 [ 40%]  (Warmup)
Chain 4: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 4: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 3: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 3: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 3: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 2: Iteration: 2000 / 4000 [ 50%]  (Warmup)
Chain 2: Iteration: 2001 / 4000 [ 50%]  (Sampling)
Chain 1: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 3: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 2: Iteration: 2400 / 4000 [ 60%]  (Sampling)
Chain 4: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 3: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 2: Iteration: 2800 / 4000 [ 70%]  (Sampling)
Chain 4: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 3: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 2: Iteration: 3200 / 4000 [ 80%]  (Sampling)
Chain 1: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 4: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 199.532 seconds (Warm-up)
Chain 4:                138.592 seconds (Sampling)
Chain 4:                338.123 seconds (Total)
Chain 4: 
Chain 3: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 204.513 seconds (Warm-up)
Chain 3:                137.42 seconds (Sampling)
Chain 3:                341.932 seconds (Total)
Chain 3: 
Chain 2: Iteration: 3600 / 4000 [ 90%]  (Sampling)
Chain 1: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 179.233 seconds (Warm-up)
Chain 1:                179.677 seconds (Sampling)
Chain 1:                358.91 seconds (Total)
Chain 1: 
Chain 2: Iteration: 4000 / 4000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 236.908 seconds (Warm-up)
Chain 2:                131.421 seconds (Sampling)
Chain 2:                368.33 seconds (Total)
Chain 2: 
Warning message:
Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable.
Running the chains for more iterations may help. See
https://mc-stan.org/misc/warnings.html#bulk-ess 
 Family: gaussian 
  Links: mu = identity; sigma = identity 
Formula: complexity ~ PC1 + (1 | gr(Glottocode2, cov = spatial_covar_mat_local)) + (1 | gr(Glottocode, cov = A)) 
   Data: data_pc (Number of observations: 440) 
  Draws: 4 chains, each with iter = 4000; warmup = 2000; thin = 1;
         total post-warmup draws = 8000

Group-Level Effects: 
~Glottocode (Number of levels: 437) 
              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Intercept)   143.53     29.87    89.54   205.54 1.00     1348     3082

~Glottocode2 (Number of levels: 437) 
              Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sd(Intercept)    63.41     28.25     5.66   111.25 1.01      338      924

Population-Level Effects: 
          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
Intercept   422.88     65.81   292.17   555.48 1.00     2767     3819
PC1         -10.89      4.15   -18.88    -2.62 1.00     5844     5447

Family Specific Parameters: 
      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS
sigma   138.42     10.71   116.83   157.62 1.01      446     1180

Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS
and Tail_ESS are effective sample size measures, and Rhat is the potential
scale reduction factor on split chains (at convergence, Rhat = 1).
null device 
          1 
finished!
Sun Mar 31 18:46:30 EDT 2024
